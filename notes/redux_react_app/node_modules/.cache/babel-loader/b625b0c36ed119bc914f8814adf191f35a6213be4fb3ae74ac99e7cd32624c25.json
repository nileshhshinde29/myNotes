{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from 'axios';\nconst initialState = {\n  todos: [],\n  status: 'idle',\n  error: null\n};\nexport const fetchTodos = createAsyncThunk('todo/fetchTodosStatus', async () => {\n  const todo = axios.get(\"https://todo-backend-rest.onrender.com/todos\").then(res => {\n    return res.data;\n  }).catch(e => console.log(e));\n  return todo;\n});\nconst count = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    // Additional reducers can be defined here\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchTodos.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchTodos.fulfilled, (state, action) => {\n      console.log('action', action);\n      state.status = 'succeeded';\n      state.todos = action.payload;\n    }).addCase(fetchTodos.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\n\n// export const count = createSlice({\n//     name: 'counter',\n//     initialState: {\n//         value: 0,\n//         todos: [],\n//         loading: false\n//     },\n//     reducers: {\n//         increament: (state) => {\n//             state.value += 1\n//         },\n//         decreament: (state) => {\n//             state.value -= 1\n//         },\n//     },\n//     extraReducers: {\n//         [fetchTodos.pending]: (state, _) => {\n//             console.log('ggg');\n//             state.loading = true;\n//         },\n//         [fetchTodos.fulfilled]: (state, action) => {\n//             console.log('ggg ', action);\n//             state.todos = action.payload;\n//             state.loading = false;\n//         },\n//         [fetchTodos.rejected]: (state, action) => {\n//             console.log('ggg');\n//             state.loading = false;\n//         }\n//     }\n// })\n\nexport const {\n  increament,\n  decreament\n} = count.actions;\nexport default count.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","initialState","todos","status","error","fetchTodos","todo","get","then","res","data","catch","e","console","log","count","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","increament","decreament","actions","reducer"],"sources":["/home/am-pc-63/NHS/React/react_Interview_notes_prectice/myNotes/notes/redux_react_app/src/practice/counterSclice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from 'axios'\nconst initialState = {\n    todos: [],\n    status: 'idle',\n    error: null,\n};\n\n\nexport const fetchTodos = createAsyncThunk('todo/fetchTodosStatus', async () => {\n    const todo = axios.get(\"https://todo-backend-rest.onrender.com/todos\")\n        .then((res) => { return (res.data) })\n        .catch((e) => console.log(e))\n    return todo\n});\nconst count = createSlice({\n    name: 'posts',\n    initialState,\n    reducers: {\n        // Additional reducers can be defined here\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(fetchTodos.pending, (state) => {\n                state.status = 'loading';\n            })\n            .addCase(fetchTodos.fulfilled, (state, action) => {\n                console.log('action', action);\n                state.status = 'succeeded';\n                state.todos = action.payload;\n            })\n            .addCase(fetchTodos.rejected, (state, action) => {\n                state.status = 'failed';\n                state.error = action.error.message;\n            });\n    },\n});\n\n\n// export const count = createSlice({\n//     name: 'counter',\n//     initialState: {\n//         value: 0,\n//         todos: [],\n//         loading: false\n//     },\n//     reducers: {\n//         increament: (state) => {\n//             state.value += 1\n//         },\n//         decreament: (state) => {\n//             state.value -= 1\n//         },\n//     },\n//     extraReducers: {\n//         [fetchTodos.pending]: (state, _) => {\n//             console.log('ggg');\n//             state.loading = true;\n//         },\n//         [fetchTodos.fulfilled]: (state, action) => {\n//             console.log('ggg ', action);\n//             state.todos = action.payload;\n//             state.loading = false;\n//         },\n//         [fetchTodos.rejected]: (state, action) => {\n//             console.log('ggg');\n//             state.loading = false;\n//         }\n//     }\n// })\n\n\nexport const { increament, decreament } = count.actions\n\nexport default count.reducer\n\n\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;AACzB,MAAMC,YAAY,GAAG;EACjBC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE;AACX,CAAC;AAGD,OAAO,MAAMC,UAAU,GAAGP,gBAAgB,CAAC,uBAAuB,EAAE,YAAY;EAC5E,MAAMQ,IAAI,GAAGN,KAAK,CAACO,GAAG,CAAC,8CAA8C,CAAC,CACjEC,IAAI,CAAEC,GAAG,IAAK;IAAE,OAAQA,GAAG,CAACC,IAAI;EAAE,CAAC,CAAC,CACpCC,KAAK,CAAEC,CAAC,IAAKC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC,CAAC;EACjC,OAAON,IAAI;AACf,CAAC,CAAC;AACF,MAAMS,KAAK,GAAGhB,WAAW,CAAC;EACtBiB,IAAI,EAAE,OAAO;EACbf,YAAY;EACZgB,QAAQ,EAAE;IACN;EAAA,CACH;EACDC,aAAa,EAAGC,OAAO,IAAK;IACxBA,OAAO,CACFC,OAAO,CAACf,UAAU,CAACgB,OAAO,EAAGC,KAAK,IAAK;MACpCA,KAAK,CAACnB,MAAM,GAAG,SAAS;IAC5B,CAAC,CAAC,CACDiB,OAAO,CAACf,UAAU,CAACkB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC9CX,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEU,MAAM,CAAC;MAC7BF,KAAK,CAACnB,MAAM,GAAG,WAAW;MAC1BmB,KAAK,CAACpB,KAAK,GAAGsB,MAAM,CAACC,OAAO;IAChC,CAAC,CAAC,CACDL,OAAO,CAACf,UAAU,CAACqB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAC7CF,KAAK,CAACnB,MAAM,GAAG,QAAQ;MACvBmB,KAAK,CAAClB,KAAK,GAAGoB,MAAM,CAACpB,KAAK,CAACuB,OAAO;IACtC,CAAC,CAAC;EACV;AACJ,CAAC,CAAC;;AAGF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,MAAM;EAAEC,UAAU;EAAEC;AAAW,CAAC,GAAGd,KAAK,CAACe,OAAO;AAEvD,eAAef,KAAK,CAACgB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}